import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;
import java.util.StringTokenizer;
public class C{
// author: Tarun Verma
static FastScanner sc = new FastScanner();
static int inf = Integer.MAX_VALUE;
static long mod = 1000000007;

static boolean isPalindrom(char[] arr, int i, int j) {
	boolean ok = true;
	while (i <= j) {
		if (arr[i] != arr[j]) {
			ok = false;
			break;
		}
		i++;
		j--;
	}
	return ok;
}

static int max(int a, int b) {
	return Math.max(a, b);
}

static int min(int a, int b) {
	return Math.min(a, b);
}

static long max(long a, long b) {
	return Math.max(a, b);
}

static long min(long a, long b) {
	return Math.min(a, b);
}

static int abs(int a) {
	return Math.abs(a);
}

static long abs(long a) {
	return Math.abs(a);
}

static void swap(long arr[], int i, int j) {
	long temp = arr[i];
	arr[i] = arr[j];
	arr[j] = temp;
}

static void swap(int arr[], int i, int j) {
	int temp = arr[i];
	arr[i] = arr[j];
	arr[j] = temp;
}

static int maxArr(int arr[]) {
	int maxi = Integer.MIN_VALUE;
	for (int x : arr)
		maxi = max(maxi, x);
	return maxi;
}

static int minArr(int arr[]) {
	int mini = Integer.MAX_VALUE;
	for (int x : arr)
		mini = min(mini, x);
	return mini;
}

static long maxArr(long arr[]) {
	long maxi = Long.MIN_VALUE;
	for (long x : arr)
		maxi = max(maxi, x);
	return maxi;
}

static long minArr(long arr[]) {
	long mini = Long.MAX_VALUE;
	for (long x : arr)
		mini = min(mini, x);
	return mini;
}

static long gcd(int a, int b) {
	if (b == 0)
		return a;
	return gcd(b, a % b);
}

static long gcd(long a, long b) {
	if (b == 0)
		return a;
	return gcd(b, a % b);
}

static void ruffleSort(int[] a) {
	int n = a.length;
	Random r = new Random();
	for (int i = 0; i < a.length; i++) {
		int oi = r.nextInt(n);
		int temp = a[i];
		a[i] = a[oi];
		a[oi] = temp;
	}
	Arrays.sort(a);
}

public static int binarySearch(int a[], int target) {
	int left = 0;
	int right = a.length - 1;
	int mid = (left + right) / 2;
	int i = 0;
	while (left <= right) {
		if (a[mid] <= target) {
			i = mid + 1;
			left = mid + 1;
		} else {
			right = mid - 1;
		}
		mid = (left + right) / 2;
	}
	return i;
}

static class FastScanner {
	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	StringTokenizer st = new StringTokenizer("");

	String next() {
		while (!st.hasMoreTokens())
			try {
				st = new StringTokenizer(br.readLine());
			} catch (IOException e) {
				e.printStackTrace();
			}
		return st.nextToken();
	}

	int nextInt() {
		return Integer.parseInt(next());
	}

	int[] readArray(int n) {
		int[] a = new int[n];
		for (int i = 0; i < n; i++)
			a[i] = nextInt();
		return a;
	}

	int[][] read2dArray(int n, int m) {
		int arr[][] = new int[n][m];
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				arr[i][j] = nextInt();
			}
		}
		return arr;
	}

	ArrayList<Integer> readArrayList(int n) {
		ArrayList<Integer> arr = new ArrayList<Integer>();
		for (int i = 0; i < n; i++) {
			int a = nextInt();
			arr.add(a);
		}
		return arr;
	}

	long nextLong() {
		return Long.parseLong(next());
	}
}
////////////////////////////////////////////////////////////////////////////////////
////////////////////DO NOT TOUCH BEFORE THIS LINE //////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
static int rec(int k, ArrayList<Integer> pos, boolean occ[], int arr[], int n, int dp[]) {
	if(k >= pos.size()) {
		return 0;
	}
	if(dp[k] != -1) {
		return dp[k];
	}
	int sub1 = 100000000;
	int sub2 = 100000000;
	boolean ok = false;
	int left = -1;
	int right = n+1;
	for(int i = pos.get(k)-1;i>=0;i--) {
		if(!occ[i]) {
			left = i;
			occ[left] = true;
			int tmp = abs(left - pos.get(k))+rec(k+1, pos, occ, arr, n, dp);
			sub1 = min(sub1, tmp);
			occ[left] = false;
			break;
		}
	}
	for(int i = pos.get(k)+1;i<n;i++) {
		if(!occ[i]) {
			right = i;
			occ[right] = true;
			int tmp = abs(right- pos.get(k))+rec(k+1, pos, occ, arr, n, dp);
			sub2 = min(sub2, tmp);
			occ[right] = false;
			break;
		}
	}
	
//	if(left != -1) {
//		occ[left] = true;
//		sub1 = abs(left - pos.get(k))+rec(k+1, pos, occ, arr, n, dp);
//		
//		occ[left] = false;
//	}
//	
//	if(right != n+1) {
//		occ[right] = true;
//		sub2 = abs(right- pos.get(k))+rec(k+1, pos, occ, arr, n, dp);
//		
//		occ[right] = false;
//	}
	
	return dp[k] = min(sub1, sub2);
	
}
public static void main(String[] args) {
	int t = 1;
//	t = sc.nextInt();
	for (int tt = 0; tt < t; tt++) {
		int n = sc.nextInt();
		int arr[] = new int[n];
		boolean occ[] = new boolean[n];
		ArrayList<Integer> pos = new ArrayList<Integer>();
		for(int i =0;i<n;i++) {
			int tmp = sc.nextInt();
			arr[i] = tmp;
			if(tmp == 1) {
				pos.add(i);
				occ[i] = true;
			}
		}
		int dp[] = new int[pos.size()];
		Arrays.fill(dp, -1);
		int cnt = rec(0, pos, occ, arr, n, dp);
		System.out.println(cnt);
//		int count = 0;
//		for(int x: pos) {
//			boolean ok = false;
//			int left = -1;
//			int right = n+1;
//			for(int i = x-1;i>=0;i--) {
//				if(!occ[i]) {
//					left = i;
//					break;
//				}
//			}
//			for(int i = x+1;i<n;i++) {
//				if(!occ[i]) {
//					right = i;
//					break;
//				}
//			}
////			System.out.println(x + " " + left + " " + right);
//			if(left != -1 && right != n+1) {
//				if(abs(left - x) <= abs(right - x)) {
//					
//					occ[left] = true;
//					count+=(abs(left - x));
//				} 
//				else {
//					occ[right] = true;count += (abs(right - x));
//					
//				}
//			} else if(left != -1) {
//				occ[left] = true;
//				count+=(abs(left - x));
//			} else if(right != n+1) {
//				occ[right] = true;count += (abs(right - x));
//			}
//			
//				
//
//			
//			
//			
//		}
//		System.out.println(count);
//		int i = 0;
//		int j = n-1;
//		for(;i<n;i++) {
//			if(arr[i] == 1) {
//				break;
//			}
//		}
//		if(i != 0) {
//			occ[i-1] = true;
//			arr[i-1] = 1;
//			arr[i] = 0;
//		}
//		i++;
//		for(;j>=0;j--) {
//			if(arr[j] == 1) {
//				break;
//			}
//		}
//		if(j != n-1) {
//			occ[j+1] = true;
//			arr[j+1] = 1;
//			arr[j] = 0;
//		}
//		j--;
		
	}
}

////////////////////////////////////////////////////////////////////////////////////	
//////////////////THIS IS THE LAST CHANCE!!!!!//////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

}